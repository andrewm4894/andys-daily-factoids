{"version":3,"file":"index.mjs","sources":["../../src/utils.ts","../../../../node_modules/.pnpm/decamelize@1.2.0/node_modules/decamelize/index.js","../../../../node_modules/.pnpm/camelcase@6.3.0/node_modules/camelcase/index.js","../../../../node_modules/.pnpm/@langchain+core@0.3.75_@opentelemetry+api@1.9.0_openai@5.20.1_ws@8.18.3_zod@4.1.5_/node_modules/@langchain/core/dist/load/map_keys.js","../../../../node_modules/.pnpm/@langchain+core@0.3.75_@opentelemetry+api@1.9.0_openai@5.20.1_ws@8.18.3_zod@4.1.5_/node_modules/@langchain/core/dist/load/serializable.js","../../../../node_modules/.pnpm/@langchain+core@0.3.75_@opentelemetry+api@1.9.0_openai@5.20.1_ws@8.18.3_zod@4.1.5_/node_modules/@langchain/core/dist/utils/env.js","../../../../node_modules/.pnpm/@langchain+core@0.3.75_@opentelemetry+api@1.9.0_openai@5.20.1_ws@8.18.3_zod@4.1.5_/node_modules/@langchain/core/dist/callbacks/base.js","../../src/typeGuards.ts","../../src/sanitization.ts","../../src/langchain/callbacks.ts"],"sourcesContent":["import { PostHog } from 'posthog-node'\nimport { Buffer } from 'buffer'\nimport OpenAIOrignal from 'openai'\nimport AnthropicOriginal from '@anthropic-ai/sdk'\nimport type { ChatCompletionTool } from 'openai/resources/chat/completions'\nimport type { ResponseCreateParamsWithTools } from 'openai/lib/ResponsesParser'\nimport type { Tool as GeminiTool } from '@google/genai'\nimport type { FormattedMessage, FormattedContent, TokenUsage } from './types'\nimport { version } from '../package.json'\nimport { v4 as uuidv4 } from 'uuid'\n\ntype ChatCompletionCreateParamsBase = OpenAIOrignal.Chat.Completions.ChatCompletionCreateParams\ntype MessageCreateParams = AnthropicOriginal.Messages.MessageCreateParams\ntype ResponseCreateParams = OpenAIOrignal.Responses.ResponseCreateParams\ntype EmbeddingCreateParams = OpenAIOrignal.EmbeddingCreateParams\ntype AnthropicTool = AnthropicOriginal.Tool\n\n// limit large outputs by truncating to 200kb (approx 200k bytes)\nexport const MAX_OUTPUT_SIZE = 200000\nconst STRING_FORMAT = 'utf8'\n\nexport interface MonitoringEventPropertiesWithDefaults {\n  distinctId?: string\n  traceId: string\n  properties?: Record<string, any>\n  privacyMode: boolean\n  groups?: Record<string, any>\n  modelOverride?: string\n  providerOverride?: string\n  costOverride?: CostOverride\n  captureImmediate?: boolean\n}\n\nexport type MonitoringEventProperties = Partial<MonitoringEventPropertiesWithDefaults>\n\nexport type MonitoringParams = {\n  [K in keyof MonitoringEventProperties as `posthog${Capitalize<string & K>}`]: MonitoringEventProperties[K]\n}\n\nexport interface CostOverride {\n  inputCost: number\n  outputCost: number\n}\n\nexport const getModelParams = (\n  params:\n    | ((\n        | ChatCompletionCreateParamsBase\n        | MessageCreateParams\n        | ResponseCreateParams\n        | ResponseCreateParamsWithTools\n        | EmbeddingCreateParams\n      ) &\n        MonitoringParams)\n    | null\n): Record<string, any> => {\n  if (!params) {\n    return {}\n  }\n  const modelParams: Record<string, any> = {}\n  const paramKeys = [\n    'temperature',\n    'max_tokens',\n    'max_completion_tokens',\n    'top_p',\n    'frequency_penalty',\n    'presence_penalty',\n    'n',\n    'stop',\n    'stream',\n    'streaming',\n  ] as const\n\n  for (const key of paramKeys) {\n    if (key in params && (params as any)[key] !== undefined) {\n      modelParams[key] = (params as any)[key]\n    }\n  }\n  return modelParams\n}\n\n/**\n * Helper to format responses (non-streaming) for consumption, mirroring Python's openai vs. anthropic approach.\n */\nexport const formatResponse = (response: any, provider: string): FormattedMessage[] => {\n  if (!response) {\n    return []\n  }\n  if (provider === 'anthropic') {\n    return formatResponseAnthropic(response)\n  } else if (provider === 'openai') {\n    return formatResponseOpenAI(response)\n  } else if (provider === 'gemini') {\n    return formatResponseGemini(response)\n  }\n  return []\n}\n\nexport const formatResponseAnthropic = (response: any): FormattedMessage[] => {\n  const output: FormattedMessage[] = []\n  const content: FormattedContent = []\n\n  for (const choice of response.content ?? []) {\n    if (choice?.type === 'text' && choice?.text) {\n      content.push({ type: 'text', text: choice.text })\n    } else if (choice?.type === 'tool_use' && choice?.name && choice?.id) {\n      content.push({\n        type: 'function',\n        id: choice.id,\n        function: {\n          name: choice.name,\n          arguments: choice.input || {},\n        },\n      })\n    }\n  }\n\n  if (content.length > 0) {\n    output.push({\n      role: 'assistant',\n      content,\n    })\n  }\n\n  return output\n}\n\nexport const formatResponseOpenAI = (response: any): FormattedMessage[] => {\n  const output: FormattedMessage[] = []\n\n  if (response.choices) {\n    for (const choice of response.choices) {\n      const content: FormattedContent = []\n      let role = 'assistant'\n\n      if (choice.message) {\n        if (choice.message.role) {\n          role = choice.message.role\n        }\n\n        if (choice.message.content) {\n          content.push({ type: 'text', text: choice.message.content })\n        }\n\n        if (choice.message.tool_calls) {\n          for (const toolCall of choice.message.tool_calls) {\n            content.push({\n              type: 'function',\n              id: toolCall.id,\n              function: {\n                name: toolCall.function.name,\n                arguments: toolCall.function.arguments,\n              },\n            })\n          }\n        }\n      }\n\n      if (content.length > 0) {\n        output.push({\n          role,\n          content,\n        })\n      }\n    }\n  }\n\n  // Handle Responses API format\n  if (response.output) {\n    const content: FormattedContent = []\n    let role = 'assistant'\n\n    for (const item of response.output) {\n      if (item.type === 'message') {\n        role = item.role\n\n        if (item.content && Array.isArray(item.content)) {\n          for (const contentItem of item.content) {\n            if (contentItem.type === 'output_text' && contentItem.text) {\n              content.push({ type: 'text', text: contentItem.text })\n            } else if (contentItem.text) {\n              content.push({ type: 'text', text: contentItem.text })\n            } else if (contentItem.type === 'input_image' && contentItem.image_url) {\n              content.push({\n                type: 'image',\n                image: contentItem.image_url,\n              })\n            }\n          }\n        } else if (item.content) {\n          content.push({ type: 'text', text: String(item.content) })\n        }\n      } else if (item.type === 'function_call') {\n        content.push({\n          type: 'function',\n          id: item.call_id || item.id || '',\n          function: {\n            name: item.name,\n            arguments: item.arguments || {},\n          },\n        })\n      }\n    }\n\n    if (content.length > 0) {\n      output.push({\n        role,\n        content,\n      })\n    }\n  }\n\n  return output\n}\n\nexport const formatResponseGemini = (response: any): FormattedMessage[] => {\n  const output: FormattedMessage[] = []\n\n  if (response.candidates && Array.isArray(response.candidates)) {\n    for (const candidate of response.candidates) {\n      if (candidate.content && candidate.content.parts) {\n        const content: FormattedContent = []\n\n        for (const part of candidate.content.parts) {\n          if (part.text) {\n            content.push({ type: 'text', text: part.text })\n          } else if (part.functionCall) {\n            content.push({\n              type: 'function',\n              function: {\n                name: part.functionCall.name,\n                arguments: part.functionCall.args,\n              },\n            })\n          }\n        }\n\n        if (content.length > 0) {\n          output.push({\n            role: 'assistant',\n            content,\n          })\n        }\n      } else if (candidate.text) {\n        output.push({\n          role: 'assistant',\n          content: [{ type: 'text', text: candidate.text }],\n        })\n      }\n    }\n  } else if (response.text) {\n    output.push({\n      role: 'assistant',\n      content: [{ type: 'text', text: response.text }],\n    })\n  }\n\n  return output\n}\n\nexport const mergeSystemPrompt = (params: MessageCreateParams & MonitoringParams, provider: string): any => {\n  if (provider == 'anthropic') {\n    const messages = params.messages || []\n    if (!(params as any).system) {\n      return messages\n    }\n    const systemMessage = (params as any).system\n    return [{ role: 'system', content: systemMessage }, ...messages]\n  }\n  return params.messages\n}\n\nexport const withPrivacyMode = (client: PostHog, privacyMode: boolean, input: any): any => {\n  return (client as any).privacy_mode || privacyMode ? null : input\n}\n\nfunction toSafeString(input: unknown): string {\n  if (input === undefined || input === null) {\n    return ''\n  }\n  if (typeof input === 'string') {\n    return input\n  }\n  try {\n    return JSON.stringify(input)\n  } catch {\n    console.warn('Failed to stringify input', input)\n    return ''\n  }\n}\n\nexport const truncate = (input: unknown): string => {\n  const str = toSafeString(input)\n  if (str === '') {\n    return ''\n  }\n\n  // Check if we need to truncate and ensure STRING_FORMAT is respected\n  const encoder = new TextEncoder()\n  const buffer = encoder.encode(str)\n  if (buffer.length <= MAX_OUTPUT_SIZE) {\n    // Ensure STRING_FORMAT is respected\n    return new TextDecoder(STRING_FORMAT).decode(buffer)\n  }\n\n  // Truncate the buffer and ensure a valid string is returned\n  const truncatedBuffer = buffer.slice(0, MAX_OUTPUT_SIZE)\n  // fatal: false means we get U+FFFD at the end if truncation broke the encoding\n  const decoder = new TextDecoder(STRING_FORMAT, { fatal: false })\n  let truncatedStr = decoder.decode(truncatedBuffer)\n  if (truncatedStr.endsWith('\\uFFFD')) {\n    truncatedStr = truncatedStr.slice(0, -1)\n  }\n  return `${truncatedStr}... [truncated]`\n}\n\n/**\n * Extract available tool calls from the request parameters.\n * These are the tools provided to the LLM, not the tool calls in the response.\n */\nexport const extractAvailableToolCalls = (\n  provider: string,\n  params: any\n): ChatCompletionTool[] | AnthropicTool[] | GeminiTool[] | null => {\n  if (provider === 'anthropic') {\n    if (params.tools) {\n      return params.tools\n    }\n\n    return null\n  } else if (provider === 'gemini') {\n    if (params.config && params.config.tools) {\n      return params.config.tools\n    }\n\n    return null\n  } else if (provider === 'openai') {\n    if (params.tools) {\n      return params.tools\n    }\n\n    return null\n  } else if (provider === 'vercel') {\n    if (params.tools) {\n      return params.tools\n    }\n\n    return null\n  }\n\n  return null\n}\n\nexport enum AIEvent {\n  Generation = '$ai_generation',\n  Embedding = '$ai_embedding',\n}\n\nexport type SendEventToPosthogParams = {\n  client: PostHog\n  eventType?: AIEvent\n  distinctId?: string\n  traceId: string\n  model: string\n  provider: string\n  input: any\n  output: any\n  latency: number\n  baseURL: string\n  httpStatus: number\n  usage?: TokenUsage\n  params: (\n    | ChatCompletionCreateParamsBase\n    | MessageCreateParams\n    | ResponseCreateParams\n    | ResponseCreateParamsWithTools\n    | EmbeddingCreateParams\n  ) &\n    MonitoringParams\n  isError?: boolean\n  error?: string\n  tools?: ChatCompletionTool[] | AnthropicTool[] | GeminiTool[] | null\n  captureImmediate?: boolean\n}\n\nfunction sanitizeValues(obj: any): any {\n  if (obj === undefined || obj === null) {\n    return obj\n  }\n  const jsonSafe = JSON.parse(JSON.stringify(obj))\n  if (typeof jsonSafe === 'string') {\n    return Buffer.from(jsonSafe, STRING_FORMAT).toString(STRING_FORMAT)\n  } else if (Array.isArray(jsonSafe)) {\n    return jsonSafe.map(sanitizeValues)\n  } else if (jsonSafe && typeof jsonSafe === 'object') {\n    return Object.fromEntries(Object.entries(jsonSafe).map(([k, v]) => [k, sanitizeValues(v)]))\n  }\n  return jsonSafe\n}\n\nconst POSTHOG_PARAMS_MAP: Record<keyof MonitoringParams, string> = {\n  posthogDistinctId: 'distinctId',\n  posthogTraceId: 'traceId',\n  posthogProperties: 'properties',\n  posthogPrivacyMode: 'privacyMode',\n  posthogGroups: 'groups',\n  posthogModelOverride: 'modelOverride',\n  posthogProviderOverride: 'providerOverride',\n  posthogCostOverride: 'costOverride',\n  posthogCaptureImmediate: 'captureImmediate',\n}\n\nexport function extractPosthogParams<T>(body: T & MonitoringParams): {\n  providerParams: T\n  posthogParams: MonitoringEventPropertiesWithDefaults\n} {\n  const providerParams: Record<string, unknown> = {}\n  const posthogParams: Record<string, unknown> = {}\n\n  for (const [key, value] of Object.entries(body)) {\n    if (POSTHOG_PARAMS_MAP[key as keyof MonitoringParams]) {\n      posthogParams[POSTHOG_PARAMS_MAP[key as keyof MonitoringParams]] = value\n    } else if (key.startsWith('posthog')) {\n      console.warn(`Unknown Posthog parameter ${key}`)\n    } else {\n      providerParams[key] = value\n    }\n  }\n\n  return {\n    providerParams: providerParams as T,\n    posthogParams: addDefaults(posthogParams),\n  }\n}\n\nfunction addDefaults(params: MonitoringEventProperties): MonitoringEventPropertiesWithDefaults {\n  return {\n    ...params,\n    privacyMode: params.privacyMode ?? false,\n    traceId: params.traceId ?? uuidv4(),\n  }\n}\n\nexport const sendEventToPosthog = async ({\n  client,\n  eventType = AIEvent.Generation,\n  distinctId,\n  traceId,\n  model,\n  provider,\n  input,\n  output,\n  latency,\n  baseURL,\n  params,\n  httpStatus = 200,\n  usage = {},\n  isError = false,\n  error,\n  tools,\n  captureImmediate = false,\n}: SendEventToPosthogParams): Promise<void> => {\n  if (!client.capture) {\n    return Promise.resolve()\n  }\n  // sanitize input and output for UTF-8 validity\n  const safeInput = sanitizeValues(input)\n  const safeOutput = sanitizeValues(output)\n  const safeError = sanitizeValues(error)\n\n  let errorData = {}\n  if (isError) {\n    errorData = {\n      $ai_is_error: true,\n      $ai_error: safeError,\n    }\n  }\n  let costOverrideData = {}\n  if (params.posthogCostOverride) {\n    const inputCostUSD = (params.posthogCostOverride.inputCost ?? 0) * (usage.inputTokens ?? 0)\n    const outputCostUSD = (params.posthogCostOverride.outputCost ?? 0) * (usage.outputTokens ?? 0)\n    costOverrideData = {\n      $ai_input_cost_usd: inputCostUSD,\n      $ai_output_cost_usd: outputCostUSD,\n      $ai_total_cost_usd: inputCostUSD + outputCostUSD,\n    }\n  }\n\n  const additionalTokenValues = {\n    ...(usage.reasoningTokens ? { $ai_reasoning_tokens: usage.reasoningTokens } : {}),\n    ...(usage.cacheReadInputTokens ? { $ai_cache_read_input_tokens: usage.cacheReadInputTokens } : {}),\n    ...(usage.cacheCreationInputTokens ? { $ai_cache_creation_input_tokens: usage.cacheCreationInputTokens } : {}),\n  }\n\n  const properties = {\n    $ai_lib: 'posthog-ai',\n    $ai_lib_version: version,\n    $ai_provider: params.posthogProviderOverride ?? provider,\n    $ai_model: params.posthogModelOverride ?? model,\n    $ai_model_parameters: getModelParams(params),\n    $ai_input: withPrivacyMode(client, params.posthogPrivacyMode ?? false, safeInput),\n    $ai_output_choices: withPrivacyMode(client, params.posthogPrivacyMode ?? false, safeOutput),\n    $ai_http_status: httpStatus,\n    $ai_input_tokens: usage.inputTokens ?? 0,\n    ...(usage.outputTokens !== undefined ? { $ai_output_tokens: usage.outputTokens } : {}),\n    ...additionalTokenValues,\n    $ai_latency: latency,\n    $ai_trace_id: traceId,\n    $ai_base_url: baseURL,\n    ...params.posthogProperties,\n    ...(distinctId ? {} : { $process_person_profile: false }),\n    ...(tools ? { $ai_tools: tools } : {}),\n    ...errorData,\n    ...costOverrideData,\n  }\n\n  const event = {\n    distinctId: distinctId ?? traceId,\n    event: eventType,\n    properties,\n    groups: params.posthogGroups,\n  }\n\n  if (captureImmediate) {\n    // await capture promise to send single event in serverless environments\n    await client.captureImmediate(event)\n  } else {\n    client.capture(event)\n  }\n}\n","'use strict';\nmodule.exports = function (str, sep) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tsep = typeof sep === 'undefined' ? '_' : sep;\n\n\treturn str\n\t\t.replace(/([a-z\\d])([A-Z])/g, '$1' + sep + '$2')\n\t\t.replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + sep + '$2')\n\t\t.toLowerCase();\n};\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import snakeCase from \"decamelize\";\nimport camelCase from \"camelcase\";\nexport function keyToJson(key, map) {\n    return map?.[key] || snakeCase(key);\n}\nexport function keyFromJson(key, map) {\n    return map?.[key] || camelCase(key);\n}\nexport function mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for (const key in fields) {\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n","import { keyToJson, mapKeys } from \"./map_keys.js\";\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [...obj] : { ...obj };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)) {\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()) {\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [secretId],\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */\nexport function get_lc_unique_name(\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" &&\n        (typeof parentClass.lc_name !== \"function\" ||\n            serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    }\n    else {\n        return serializableClass.name;\n    }\n}\nexport class Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor),\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */\n    get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */\n    get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * A manual list of keys that should be serialized.\n     * If not overridden, all fields passed into the constructor will be serialized.\n     */\n    get lc_serializable_keys() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args) {\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (this.lc_serializable_keys !== undefined) {\n            this.lc_kwargs = Object.fromEntries(Object.entries(kwargs || {}).filter(([key]) => this.lc_serializable_keys?.includes(key)));\n        }\n        else {\n            this.lc_kwargs = kwargs ?? {};\n        }\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable ||\n            typeof this.lc_kwargs !== \"object\" ||\n            Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key) => {\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for (\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)) {\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath) => {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()) {\n                if (!(key in read) || read[key] === undefined)\n                    return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    }\n                    else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: mapKeys(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, keyToJson, aliases),\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id,\n        };\n    }\n}\n","export const isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexport const isWebWorker = () => typeof globalThis === \"object\" &&\n    globalThis.constructor &&\n    globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexport const isJsDom = () => (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n    (typeof navigator !== \"undefined\" && navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nexport const isDeno = () => typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nexport const isNode = () => typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\" &&\n    !isDeno();\nexport const getEnv = () => {\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    }\n    else if (isNode()) {\n        env = \"node\";\n    }\n    else if (isWebWorker()) {\n        env = \"webworker\";\n    }\n    else if (isJsDom()) {\n        env = \"jsdom\";\n    }\n    else if (isDeno()) {\n        env = \"deno\";\n    }\n    else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\n/**\n * @deprecated Use getRuntimeEnvironmentSync instead\n */\nexport async function getRuntimeEnvironment() {\n    return getRuntimeEnvironmentSync();\n}\nexport function getRuntimeEnvironmentSync() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env,\n        };\n    }\n    return runtimeEnvironment;\n}\nexport function getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        if (typeof process !== \"undefined\") {\n            // eslint-disable-next-line no-process-env\n            return process.env?.[name];\n        }\n        else if (isDeno()) {\n            return Deno?.env.get(name);\n        }\n        else {\n            return undefined;\n        }\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n","import * as uuid from \"uuid\";\nimport { Serializable, get_lc_unique_name, } from \"../load/serializable.js\";\nimport { getEnvironmentVariable } from \"../utils/env.js\";\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */\nclass BaseCallbackHandlerMethodsClass {\n}\nexport function callbackHandlerPrefersStreaming(x) {\n    return \"lc_prefer_streaming\" in x && x.lc_prefer_streaming;\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */\nexport class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\"langchain_core\", \"callbacks\", this.name];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    get lc_serializable_keys() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor),\n        ];\n    }\n    constructor(input) {\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreCustomEvent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"raiseError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getEnvironmentVariable(\"LANGCHAIN_CALLBACKS_BACKGROUND\") === \"false\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.ignoreCustomEvent =\n                input.ignoreCustomEvent ?? this.ignoreCustomEvent;\n            this.raiseError = input.raiseError ?? this.raiseError;\n            this.awaitHandlers =\n                this.raiseError || (input._awaitHandler ?? this.awaitHandlers);\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor() {\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid.v4()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\nexport const isBaseCallbackHandler = (x) => {\n    const callbackHandler = x;\n    return (callbackHandler !== undefined &&\n        typeof callbackHandler.copy === \"function\" &&\n        typeof callbackHandler.name === \"string\" &&\n        typeof callbackHandler.awaitHandlers === \"boolean\");\n};\n","// Type guards for safer type checking\n\nexport const isString = (value: unknown): value is string => {\n  return typeof value === 'string'\n}\n\nexport const isObject = (value: unknown): value is Record<string, unknown> => {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n","import { isString, isObject } from './typeGuards'\n\nconst REDACTED_IMAGE_PLACEHOLDER = '[base64 image redacted]'\n\n// ============================================\n// Base64 Detection Helpers\n// ============================================\n\nconst isBase64DataUrl = (str: string): boolean => {\n  return /^data:([^;]+);base64,/.test(str)\n}\n\nconst isValidUrl = (str: string): boolean => {\n  try {\n    new URL(str)\n    return true\n  } catch {\n    // Not an absolute URL, check if it's a relative URL or path\n    return str.startsWith('/') || str.startsWith('./') || str.startsWith('../')\n  }\n}\n\nconst isRawBase64 = (str: string): boolean => {\n  // Skip if it's a valid URL or path\n  if (isValidUrl(str)) {\n    return false\n  }\n\n  // Check if it's a valid base64 string\n  // Base64 images are typically at least a few hundred chars, but we'll be conservative\n  return str.length > 20 && /^[A-Za-z0-9+/]+=*$/.test(str)\n}\n\nexport function redactBase64DataUrl(str: string): string\nexport function redactBase64DataUrl(str: unknown): unknown\nexport function redactBase64DataUrl(str: unknown): unknown {\n  if (!isString(str)) return str\n\n  // Check for data URL format\n  if (isBase64DataUrl(str)) {\n    return REDACTED_IMAGE_PLACEHOLDER\n  }\n\n  // Check for raw base64 (Vercel sends raw base64 for inline images)\n  if (isRawBase64(str)) {\n    return REDACTED_IMAGE_PLACEHOLDER\n  }\n\n  return str\n}\n\n// ============================================\n// Common Message Processing\n// ============================================\n\ntype ContentTransformer = (item: unknown) => unknown\n\nconst processMessages = (messages: unknown, transformContent: ContentTransformer): unknown => {\n  if (!messages) return messages\n\n  const processContent = (content: unknown): unknown => {\n    if (typeof content === 'string') return content\n\n    if (!content) return content\n\n    if (Array.isArray(content)) {\n      return content.map(transformContent)\n    }\n\n    // Handle single object content\n    return transformContent(content)\n  }\n\n  const processMessage = (msg: unknown): unknown => {\n    if (!isObject(msg) || !('content' in msg)) return msg\n    return { ...msg, content: processContent(msg.content) }\n  }\n\n  // Handle both arrays and single messages\n  if (Array.isArray(messages)) {\n    return messages.map(processMessage)\n  }\n\n  return processMessage(messages)\n}\n\n// ============================================\n// Provider-Specific Image Sanitizers\n// ============================================\n\nconst sanitizeOpenAIImage = (item: unknown): unknown => {\n  if (!isObject(item)) return item\n\n  // Handle image_url format\n  if (item.type === 'image_url' && 'image_url' in item && isObject(item.image_url) && 'url' in item.image_url) {\n    return {\n      ...item,\n      image_url: {\n        ...item.image_url,\n        url: redactBase64DataUrl(item.image_url.url),\n      },\n    }\n  }\n\n  return item\n}\n\nconst sanitizeOpenAIResponseImage = (item: unknown): unknown => {\n  if (!isObject(item)) return item\n\n  // Handle input_image format\n  if (item.type === 'input_image' && 'image_url' in item) {\n    return {\n      ...item,\n      image_url: redactBase64DataUrl(item.image_url),\n    }\n  }\n\n  return item\n}\n\nconst sanitizeAnthropicImage = (item: unknown): unknown => {\n  if (!isObject(item)) return item\n\n  // Handle Anthropic's image format\n  if (\n    item.type === 'image' &&\n    'source' in item &&\n    isObject(item.source) &&\n    item.source.type === 'base64' &&\n    'data' in item.source\n  ) {\n    return {\n      ...item,\n      source: {\n        ...item.source,\n        data: REDACTED_IMAGE_PLACEHOLDER,\n      },\n    }\n  }\n\n  return item\n}\n\nconst sanitizeGeminiPart = (part: unknown): unknown => {\n  if (!isObject(part)) return part\n\n  // Handle Gemini's inline data format\n  if ('inlineData' in part && isObject(part.inlineData) && 'data' in part.inlineData) {\n    return {\n      ...part,\n      inlineData: {\n        ...part.inlineData,\n        data: REDACTED_IMAGE_PLACEHOLDER,\n      },\n    }\n  }\n\n  return part\n}\n\nconst processGeminiItem = (item: unknown): unknown => {\n  if (!isObject(item)) return item\n\n  // If it has parts, process them\n  if ('parts' in item && item.parts) {\n    const parts = Array.isArray(item.parts) ? item.parts.map(sanitizeGeminiPart) : sanitizeGeminiPart(item.parts)\n\n    return { ...item, parts }\n  }\n\n  return item\n}\n\nconst sanitizeLangChainImage = (item: unknown): unknown => {\n  if (!isObject(item)) return item\n\n  // OpenAI style\n  if (item.type === 'image_url' && 'image_url' in item && isObject(item.image_url) && 'url' in item.image_url) {\n    return {\n      ...item,\n      image_url: {\n        ...item.image_url,\n        url: redactBase64DataUrl(item.image_url.url),\n      },\n    }\n  }\n\n  // Direct image with data field\n  if (item.type === 'image' && 'data' in item) {\n    return { ...item, data: redactBase64DataUrl(item.data) }\n  }\n\n  // Anthropic style\n  if (item.type === 'image' && 'source' in item && isObject(item.source) && 'data' in item.source) {\n    return {\n      ...item,\n      source: {\n        ...item.source,\n        data: redactBase64DataUrl(item.source.data),\n      },\n    }\n  }\n\n  // Google style\n  if (item.type === 'media' && 'data' in item) {\n    return { ...item, data: redactBase64DataUrl(item.data) }\n  }\n\n  return item\n}\n\n// Export individual sanitizers for tree-shaking\nexport const sanitizeOpenAI = (data: unknown): unknown => {\n  return processMessages(data, sanitizeOpenAIImage)\n}\n\nexport const sanitizeOpenAIResponse = (data: unknown): unknown => {\n  return processMessages(data, sanitizeOpenAIResponseImage)\n}\n\nexport const sanitizeAnthropic = (data: unknown): unknown => {\n  return processMessages(data, sanitizeAnthropicImage)\n}\n\nexport const sanitizeGemini = (data: unknown): unknown => {\n  // Gemini has a different structure with 'parts' directly on items instead of 'content'\n  // So we need custom processing instead of using processMessages\n  if (!data) return data\n\n  if (Array.isArray(data)) {\n    return data.map(processGeminiItem)\n  }\n\n  return processGeminiItem(data)\n}\n\nexport const sanitizeLangChain = (data: unknown): unknown => {\n  return processMessages(data, sanitizeLangChainImage)\n}\n","import { PostHog } from 'posthog-node'\nimport { withPrivacyMode, getModelParams } from '../utils'\nimport { BaseCallbackHandler } from '@langchain/core/callbacks/base'\nimport { version } from '../../package.json'\nimport type { Serialized } from '@langchain/core/load/serializable'\nimport type { ChainValues } from '@langchain/core/utils/types'\nimport type { LLMResult } from '@langchain/core/outputs'\nimport type { AgentAction, AgentFinish } from '@langchain/core/agents'\nimport type { DocumentInterface } from '@langchain/core/documents'\nimport { ToolCall } from '@langchain/core/messages/tool'\nimport { BaseMessage } from '@langchain/core/messages'\nimport { sanitizeLangChain } from '../sanitization'\n\ninterface SpanMetadata {\n  /** Name of the trace/span (e.g. chain name) */\n  name: string\n  /** Timestamp (in ms) when the run started */\n  startTime: number\n  /** Timestamp (in ms) when the run ended (if already finished) */\n  endTime?: number\n  /** The input state */\n  input?: any\n}\n\ninterface GenerationMetadata extends SpanMetadata {\n  /** Provider used (e.g. openai, anthropic) */\n  provider?: string\n  /** Model name used in the generation */\n  model?: string\n  /** The model parameters (temperature, max_tokens, etc.) */\n  modelParams?: Record<string, any>\n  /** The base URL—for example, the API base used */\n  baseUrl?: string\n  /** The tools used in the generation */\n  tools?: Record<string, any>\n}\n\n/** A run may either be a Span or a Generation */\ntype RunMetadata = SpanMetadata | GenerationMetadata\n\n/** Storage for run metadata */\ntype RunMetadataStorage = { [runId: string]: RunMetadata }\n\nexport class LangChainCallbackHandler extends BaseCallbackHandler {\n  public name = 'PosthogCallbackHandler'\n  private client: PostHog\n  private distinctId?: string | number\n  private traceId?: string | number\n  private properties: Record<string, any>\n  private privacyMode: boolean\n  private groups: Record<string, any>\n  private debug: boolean\n\n  private runs: RunMetadataStorage = {}\n  private parentTree: { [runId: string]: string } = {}\n\n  constructor(options: {\n    client: PostHog\n    distinctId?: string | number\n    traceId?: string | number\n    properties?: Record<string, any>\n    privacyMode?: boolean\n    groups?: Record<string, any>\n    debug?: boolean\n  }) {\n    if (!options.client) {\n      throw new Error('PostHog client is required')\n    }\n    super()\n    this.client = options.client\n    this.distinctId = options.distinctId\n    this.traceId = options.traceId\n    this.properties = options.properties || {}\n    this.privacyMode = options.privacyMode || false\n    this.groups = options.groups || {}\n    this.debug = options.debug || false\n  }\n\n  // ===== CALLBACK METHODS =====\n\n  public handleChainStart(\n    chain: Serialized,\n    inputs: ChainValues,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n    metadata?: Record<string, unknown>,\n    _runType?: string,\n    runName?: string\n  ): void {\n    this._logDebugEvent('on_chain_start', runId, parentRunId, { inputs, tags })\n    this._setParentOfRun(runId, parentRunId)\n    this._setTraceOrSpanMetadata(chain, inputs, runId, parentRunId, metadata, tags, runName)\n  }\n\n  public handleChainEnd(\n    outputs: ChainValues,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n    _kwargs?: { inputs?: Record<string, unknown> }\n  ): void {\n    this._logDebugEvent('on_chain_end', runId, parentRunId, { outputs, tags })\n    this._popRunAndCaptureTraceOrSpan(runId, parentRunId, outputs)\n  }\n\n  public handleChainError(\n    error: Error,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n    _kwargs?: { inputs?: Record<string, unknown> }\n  ): void {\n    this._logDebugEvent('on_chain_error', runId, parentRunId, { error, tags })\n    this._popRunAndCaptureTraceOrSpan(runId, parentRunId, error)\n  }\n\n  public handleChatModelStart(\n    serialized: Serialized,\n    messages: BaseMessage[][],\n    runId: string,\n    parentRunId?: string,\n    extraParams?: Record<string, unknown>,\n    tags?: string[],\n    metadata?: Record<string, unknown>,\n    runName?: string\n  ): void {\n    this._logDebugEvent('on_chat_model_start', runId, parentRunId, { messages, tags })\n    this._setParentOfRun(runId, parentRunId)\n    // Flatten the two-dimensional messages and convert each message to a plain object\n    const input = messages.flat().map((m) => this._convertMessageToDict(m))\n    this._setLLMMetadata(serialized, runId, input, metadata, extraParams, runName)\n  }\n\n  public handleLLMStart(\n    serialized: Serialized,\n    prompts: string[],\n    runId: string,\n    parentRunId?: string,\n    extraParams?: Record<string, unknown>,\n    tags?: string[],\n    metadata?: Record<string, unknown>,\n    runName?: string\n  ): void {\n    this._logDebugEvent('on_llm_start', runId, parentRunId, { prompts, tags })\n    this._setParentOfRun(runId, parentRunId)\n    this._setLLMMetadata(serialized, runId, prompts, metadata, extraParams, runName)\n  }\n\n  public handleLLMEnd(\n    output: LLMResult,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n    _extraParams?: Record<string, unknown>\n  ): void {\n    this._logDebugEvent('on_llm_end', runId, parentRunId, { output, tags })\n    this._popRunAndCaptureGeneration(runId, parentRunId, output)\n  }\n\n  public handleLLMError(\n    err: Error,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n    _extraParams?: Record<string, unknown>\n  ): void {\n    this._logDebugEvent('on_llm_error', runId, parentRunId, { err, tags })\n    this._popRunAndCaptureGeneration(runId, parentRunId, err)\n  }\n\n  public handleToolStart(\n    tool: Serialized,\n    input: string,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n    metadata?: Record<string, unknown>,\n    runName?: string\n  ): void {\n    this._logDebugEvent('on_tool_start', runId, parentRunId, { input, tags })\n    this._setParentOfRun(runId, parentRunId)\n    this._setTraceOrSpanMetadata(tool, input, runId, parentRunId, metadata, tags, runName)\n  }\n\n  public handleToolEnd(output: any, runId: string, parentRunId?: string, tags?: string[]): void {\n    this._logDebugEvent('on_tool_end', runId, parentRunId, { output, tags })\n    this._popRunAndCaptureTraceOrSpan(runId, parentRunId, output)\n  }\n\n  public handleToolError(err: Error, runId: string, parentRunId?: string, tags?: string[]): void {\n    this._logDebugEvent('on_tool_error', runId, parentRunId, { err, tags })\n    this._popRunAndCaptureTraceOrSpan(runId, parentRunId, err)\n  }\n\n  public handleRetrieverStart(\n    retriever: Serialized,\n    query: string,\n    runId: string,\n    parentRunId?: string,\n    tags?: string[],\n    metadata?: Record<string, unknown>,\n    name?: string\n  ): void {\n    this._logDebugEvent('on_retriever_start', runId, parentRunId, { query, tags })\n    this._setParentOfRun(runId, parentRunId)\n    this._setTraceOrSpanMetadata(retriever, query, runId, parentRunId, metadata, tags, name)\n  }\n\n  public handleRetrieverEnd(\n    documents: DocumentInterface[],\n    runId: string,\n    parentRunId?: string,\n    tags?: string[]\n  ): void {\n    this._logDebugEvent('on_retriever_end', runId, parentRunId, { documents, tags })\n    this._popRunAndCaptureTraceOrSpan(runId, parentRunId, documents)\n  }\n\n  public handleRetrieverError(err: Error, runId: string, parentRunId?: string, tags?: string[]): void {\n    this._logDebugEvent('on_retriever_error', runId, parentRunId, { err, tags })\n    this._popRunAndCaptureTraceOrSpan(runId, parentRunId, err)\n  }\n\n  public handleAgentAction(action: AgentAction, runId: string, parentRunId?: string, tags?: string[]): void {\n    this._logDebugEvent('on_agent_action', runId, parentRunId, { action, tags })\n    this._setParentOfRun(runId, parentRunId)\n    this._setTraceOrSpanMetadata(null, action, runId, parentRunId)\n  }\n\n  public handleAgentEnd(action: AgentFinish, runId: string, parentRunId?: string, tags?: string[]): void {\n    this._logDebugEvent('on_agent_finish', runId, parentRunId, { action, tags })\n    this._popRunAndCaptureTraceOrSpan(runId, parentRunId, action)\n  }\n\n  // ===== PRIVATE HELPERS =====\n\n  private _setParentOfRun(runId: string, parentRunId?: string): void {\n    if (parentRunId) {\n      this.parentTree[runId] = parentRunId\n    }\n  }\n\n  private _popParentOfRun(runId: string): void {\n    delete this.parentTree[runId]\n  }\n\n  private _findRootRun(runId: string): string {\n    let id = runId\n    while (this.parentTree[id]) {\n      id = this.parentTree[id]\n    }\n    return id\n  }\n\n  private _setTraceOrSpanMetadata(\n    serialized: any,\n    input: any,\n    runId: string,\n    parentRunId?: string,\n    ...args: any[]\n  ): void {\n    // Use default names if not provided: if this is a top-level run, we mark it as a trace, otherwise as a span.\n    const defaultName = parentRunId ? 'span' : 'trace'\n    const runName = this._getLangchainRunName(serialized, ...args) || defaultName\n    this.runs[runId] = {\n      name: runName,\n      input,\n      startTime: Date.now(),\n    } as SpanMetadata\n  }\n\n  private _setLLMMetadata(\n    serialized: Serialized | null,\n    runId: string,\n    messages: any,\n    metadata?: any,\n    extraParams?: any,\n    runName?: string\n  ): void {\n    const runNameFound = this._getLangchainRunName(serialized, { extraParams, runName }) || 'generation'\n    const generation: GenerationMetadata = {\n      name: runNameFound,\n      input: sanitizeLangChain(messages),\n      startTime: Date.now(),\n    }\n    if (extraParams) {\n      generation.modelParams = getModelParams(extraParams.invocation_params)\n\n      if (extraParams.invocation_params && extraParams.invocation_params.tools) {\n        generation.tools = extraParams.invocation_params.tools\n      }\n    }\n    if (metadata) {\n      if (metadata.ls_model_name) {\n        generation.model = metadata.ls_model_name\n      }\n      if (metadata.ls_provider) {\n        generation.provider = metadata.ls_provider\n      }\n    }\n    if (serialized && 'kwargs' in serialized && serialized.kwargs.openai_api_base) {\n      generation.baseUrl = serialized.kwargs.openai_api_base\n    }\n    this.runs[runId] = generation\n  }\n\n  private _popRunMetadata(runId: string): RunMetadata | undefined {\n    const endTime = Date.now()\n    const run = this.runs[runId]\n    if (!run) {\n      console.warn(`No run metadata found for run ${runId}`)\n      return undefined\n    }\n    run.endTime = endTime\n    delete this.runs[runId]\n    return run\n  }\n\n  private _getTraceId(runId: string): string {\n    return this.traceId ? String(this.traceId) : this._findRootRun(runId)\n  }\n\n  private _getParentRunId(traceId: string, _runId: string, parentRunId?: string): string | undefined {\n    // Replace the parent-run if not found in our stored parent tree.\n    if (parentRunId && !this.parentTree[parentRunId]) {\n      return traceId\n    }\n    return parentRunId\n  }\n\n  private _popRunAndCaptureTraceOrSpan(\n    runId: string,\n    parentRunId: string | undefined,\n    outputs: ChainValues | DocumentInterface[] | AgentFinish | Error | any\n  ): void {\n    const traceId = this._getTraceId(runId)\n    this._popParentOfRun(runId)\n    const run = this._popRunMetadata(runId)\n    if (!run) {\n      return\n    }\n    if ('modelParams' in run) {\n      console.warn(`Run ${runId} is a generation, but attempted to be captured as a trace/span.`)\n      return\n    }\n    const actualParentRunId = this._getParentRunId(traceId, runId, parentRunId)\n    this._captureTraceOrSpan(traceId, runId, run as SpanMetadata, outputs, actualParentRunId)\n  }\n\n  private _captureTraceOrSpan(\n    traceId: string,\n    runId: string,\n    run: SpanMetadata,\n    outputs: ChainValues | DocumentInterface[] | AgentFinish | Error | any,\n    parentRunId?: string\n  ): void {\n    const eventName = parentRunId ? '$ai_span' : '$ai_trace'\n    const latency = run.endTime ? (run.endTime - run.startTime) / 1000 : 0\n    const eventProperties: Record<string, any> = {\n      $ai_lib: 'posthog-ai',\n      $ai_lib_version: version,\n      $ai_trace_id: traceId,\n      $ai_input_state: withPrivacyMode(this.client, this.privacyMode, run.input),\n      $ai_latency: latency,\n      $ai_span_name: run.name,\n      $ai_span_id: runId,\n    }\n    if (parentRunId) {\n      eventProperties['$ai_parent_id'] = parentRunId\n    }\n\n    Object.assign(eventProperties, this.properties)\n    if (!this.distinctId) {\n      eventProperties['$process_person_profile'] = false\n    }\n    if (outputs instanceof Error) {\n      eventProperties['$ai_error'] = outputs.toString()\n      eventProperties['$ai_is_error'] = true\n    } else if (outputs !== undefined) {\n      eventProperties['$ai_output_state'] = withPrivacyMode(this.client, this.privacyMode, outputs)\n    }\n    this.client.capture({\n      distinctId: this.distinctId ? this.distinctId.toString() : runId,\n      event: eventName,\n      properties: eventProperties,\n      groups: this.groups,\n    })\n  }\n\n  private _popRunAndCaptureGeneration(\n    runId: string,\n    parentRunId: string | undefined,\n    response: LLMResult | Error\n  ): void {\n    const traceId = this._getTraceId(runId)\n    this._popParentOfRun(runId)\n    const run = this._popRunMetadata(runId)\n    if (!run || typeof run !== 'object' || !('modelParams' in run)) {\n      console.warn(`Run ${runId} is not a generation, but attempted to be captured as such.`)\n      return\n    }\n    const actualParentRunId = this._getParentRunId(traceId, runId, parentRunId)\n    this._captureGeneration(traceId, runId, run as GenerationMetadata, response, actualParentRunId)\n  }\n\n  private _captureGeneration(\n    traceId: string,\n    runId: string,\n    run: GenerationMetadata,\n    output: LLMResult | Error,\n    parentRunId?: string\n  ): void {\n    const latency = run.endTime ? (run.endTime - run.startTime) / 1000 : 0\n    const eventProperties: Record<string, any> = {\n      $ai_lib: 'posthog-ai',\n      $ai_lib_version: version,\n      $ai_trace_id: traceId,\n      $ai_span_id: runId,\n      $ai_span_name: run.name,\n      $ai_parent_id: parentRunId,\n      $ai_provider: run.provider,\n      $ai_model: run.model,\n      $ai_model_parameters: run.modelParams,\n      $ai_input: withPrivacyMode(this.client, this.privacyMode, run.input),\n      $ai_http_status: 200,\n      $ai_latency: latency,\n      $ai_base_url: run.baseUrl,\n    }\n\n    if (run.tools) {\n      eventProperties['$ai_tools'] = run.tools\n    }\n\n    if (output instanceof Error) {\n      eventProperties['$ai_http_status'] = (output as any).status || 500\n      eventProperties['$ai_error'] = output.toString()\n      eventProperties['$ai_is_error'] = true\n    } else {\n      // Handle token usage\n      const [inputTokens, outputTokens, additionalTokenData] = this.parseUsage(output)\n      eventProperties['$ai_input_tokens'] = inputTokens\n      eventProperties['$ai_output_tokens'] = outputTokens\n\n      // Add additional token data to properties\n      if (additionalTokenData.cacheReadInputTokens) {\n        eventProperties['$ai_cache_read_tokens'] = additionalTokenData.cacheReadInputTokens\n      }\n      if (additionalTokenData.reasoningTokens) {\n        eventProperties['$ai_reasoning_tokens'] = additionalTokenData.reasoningTokens\n      }\n\n      // Handle generations/completions\n      let completions\n      if (output.generations && Array.isArray(output.generations)) {\n        const lastGeneration = output.generations[output.generations.length - 1]\n        if (Array.isArray(lastGeneration) && lastGeneration.length > 0) {\n          // Check if this is a ChatGeneration by looking at the first item\n          const isChatGeneration = 'message' in lastGeneration[0] && lastGeneration[0].message\n\n          if (isChatGeneration) {\n            // For ChatGeneration, convert messages to dict format\n            completions = lastGeneration.map((gen: any) => {\n              return this._convertMessageToDict(gen.message)\n            })\n          } else {\n            // For non-ChatGeneration, extract raw response\n            completions = lastGeneration.map((gen: any) => {\n              return this._extractRawResponse(gen)\n            })\n          }\n        }\n      }\n\n      if (completions) {\n        eventProperties['$ai_output_choices'] = withPrivacyMode(this.client, this.privacyMode, completions)\n      }\n    }\n\n    Object.assign(eventProperties, this.properties)\n    if (!this.distinctId) {\n      eventProperties['$process_person_profile'] = false\n    }\n\n    this.client.capture({\n      distinctId: this.distinctId ? this.distinctId.toString() : traceId,\n      event: '$ai_generation',\n      properties: eventProperties,\n      groups: this.groups,\n    })\n  }\n\n  private _logDebugEvent(eventName: string, runId: string, parentRunId: string | undefined, extra: any): void {\n    if (this.debug) {\n      console.log(`Event: ${eventName}, runId: ${runId}, parentRunId: ${parentRunId}, extra:`, extra)\n    }\n  }\n\n  private _getLangchainRunName(serialized: any, ...args: any): string | undefined {\n    if (args && args.length > 0) {\n      for (const arg of args) {\n        if (arg && typeof arg === 'object' && 'name' in arg) {\n          return arg.name\n        } else if (arg && typeof arg === 'object' && 'runName' in arg) {\n          return arg.runName\n        }\n      }\n    }\n\n    if (serialized && serialized.name) {\n      return serialized.name\n    }\n    if (serialized && serialized.id) {\n      return Array.isArray(serialized.id) ? serialized.id[serialized.id.length - 1] : serialized.id\n    }\n    return undefined\n  }\n\n  private _convertLcToolCallsToOai(toolCalls: ToolCall[]): Record<string, any>[] {\n    return toolCalls.map((toolCall: ToolCall) => ({\n      type: 'function',\n      id: toolCall.id,\n      function: {\n        name: toolCall.name,\n        arguments: JSON.stringify(toolCall.args),\n      },\n    }))\n  }\n\n  private _extractRawResponse(generation: any): any {\n    // Extract the response from the last response of the LLM call\n    // We return the text of the response if not empty\n    if (generation.text != null && generation.text.trim() !== '') {\n      return generation.text.trim()\n    } else if (generation.message) {\n      // Additional kwargs contains the response in case of tool usage\n      return generation.message.additional_kwargs || generation.message.additionalKwargs || {}\n    } else {\n      // Not tool usage, some LLM responses can be simply empty\n      return ''\n    }\n  }\n\n  private _convertMessageToDict(message: any): Record<string, any> {\n    let messageDict: Record<string, any> = {}\n\n    const messageType: string = message.getType()\n\n    switch (messageType) {\n      case 'human':\n        messageDict = { role: 'user', content: message.content }\n        break\n      case 'ai':\n        messageDict = { role: 'assistant', content: message.content }\n\n        if (message.tool_calls) {\n          messageDict.tool_calls = this._convertLcToolCallsToOai(message.tool_calls)\n        }\n\n        break\n      case 'system':\n        messageDict = { role: 'system', content: message.content }\n        break\n      case 'tool':\n        messageDict = { role: 'tool', content: message.content }\n        break\n      case 'function':\n        messageDict = { role: 'function', content: message.content }\n        break\n      default:\n        messageDict = { role: messageType, content: String(message.content) }\n        break\n    }\n\n    if (message.additional_kwargs) {\n      messageDict = { ...messageDict, ...message.additional_kwargs }\n    }\n\n    // Sanitize the message content to redact base64 images\n    return sanitizeLangChain(messageDict) as Record<string, any>\n  }\n\n  private _parseUsageModel(usage: any): [number, number, Record<string, any>] {\n    const conversionList: Array<[string, 'input' | 'output']> = [\n      ['promptTokens', 'input'],\n      ['completionTokens', 'output'],\n      ['input_tokens', 'input'],\n      ['output_tokens', 'output'],\n      ['prompt_token_count', 'input'],\n      ['candidates_token_count', 'output'],\n      ['inputTokenCount', 'input'],\n      ['outputTokenCount', 'output'],\n      ['input_token_count', 'input'],\n      ['generated_token_count', 'output'],\n    ]\n\n    const parsedUsage = conversionList.reduce(\n      (acc: { input: number; output: number }, [modelKey, typeKey]) => {\n        const value = usage[modelKey]\n        if (value != null) {\n          const finalCount = Array.isArray(value)\n            ? value.reduce((sum: number, tokenCount: number) => sum + tokenCount, 0)\n            : value\n          acc[typeKey] = finalCount\n        }\n        return acc\n      },\n      { input: 0, output: 0 }\n    )\n\n    // Extract additional token details like cached tokens and reasoning tokens\n    const additionalTokenData: Record<string, any> = {}\n\n    // Check for cached tokens in various formats\n    if (usage.prompt_tokens_details?.cached_tokens != null) {\n      additionalTokenData.cacheReadInputTokens = usage.prompt_tokens_details.cached_tokens\n    } else if (usage.input_token_details?.cache_read != null) {\n      additionalTokenData.cacheReadInputTokens = usage.input_token_details.cache_read\n    } else if (usage.cachedPromptTokens != null) {\n      additionalTokenData.cacheReadInputTokens = usage.cachedPromptTokens\n    }\n\n    // Check for reasoning tokens in various formats\n    if (usage.completion_tokens_details?.reasoning_tokens != null) {\n      additionalTokenData.reasoningTokens = usage.completion_tokens_details.reasoning_tokens\n    } else if (usage.output_token_details?.reasoning != null) {\n      additionalTokenData.reasoningTokens = usage.output_token_details.reasoning\n    } else if (usage.reasoningTokens != null) {\n      additionalTokenData.reasoningTokens = usage.reasoningTokens\n    }\n\n    return [parsedUsage.input, parsedUsage.output, additionalTokenData]\n  }\n\n  private parseUsage(response: LLMResult): [number, number, Record<string, any>] {\n    let llmUsage: [number, number, Record<string, any>] = [0, 0, {}]\n    const llmUsageKeys = ['token_usage', 'usage', 'tokenUsage']\n\n    if (response.llmOutput != null) {\n      const key = llmUsageKeys.find((k) => response.llmOutput?.[k] != null)\n      if (key) {\n        llmUsage = this._parseUsageModel(response.llmOutput[key])\n      }\n    }\n\n    // If top-level usage info was not found, try checking the generations.\n    if (llmUsage[0] === 0 && llmUsage[1] === 0 && response.generations) {\n      for (const generation of response.generations) {\n        for (const genChunk of generation) {\n          // Check other paths for usage information\n          if (genChunk.generationInfo?.usage_metadata) {\n            llmUsage = this._parseUsageModel(genChunk.generationInfo.usage_metadata)\n            return llmUsage\n          }\n\n          const messageChunk = genChunk.generationInfo ?? {}\n          const responseMetadata = messageChunk.response_metadata ?? {}\n          const chunkUsage =\n            responseMetadata['usage'] ??\n            responseMetadata['amazon-bedrock-invocationMetrics'] ??\n            messageChunk.usage_metadata\n          if (chunkUsage) {\n            llmUsage = this._parseUsageModel(chunkUsage)\n            return llmUsage\n          }\n        }\n      }\n    }\n\n    return llmUsage\n  }\n}\n"],"names":["getModelParams","params","modelParams","paramKeys","key","undefined","withPrivacyMode","client","privacyMode","input","privacy_mode","camelcaseModule","isString","value","isObject","Array","isArray","REDACTED_IMAGE_PLACEHOLDER","isBase64DataUrl","str","test","isValidUrl","URL","startsWith","isRawBase64","length","redactBase64DataUrl","processMessages","messages","transformContent","processContent","content","map","processMessage","msg","sanitizeLangChainImage","item","type","image_url","url","data","source","sanitizeLangChain","LangChainCallbackHandler","BaseCallbackHandler","name","runs","parentTree","constructor","options","Error","distinctId","traceId","properties","groups","debug","handleChainStart","chain","inputs","runId","parentRunId","tags","metadata","_runType","runName","_logDebugEvent","_setParentOfRun","_setTraceOrSpanMetadata","handleChainEnd","outputs","_kwargs","_popRunAndCaptureTraceOrSpan","handleChainError","error","handleChatModelStart","serialized","extraParams","flat","m","_convertMessageToDict","_setLLMMetadata","handleLLMStart","prompts","handleLLMEnd","output","_extraParams","_popRunAndCaptureGeneration","handleLLMError","err","handleToolStart","tool","handleToolEnd","handleToolError","handleRetrieverStart","retriever","query","handleRetrieverEnd","documents","handleRetrieverError","handleAgentAction","action","handleAgentEnd","_popParentOfRun","_findRootRun","id","args","defaultName","_getLangchainRunName","startTime","Date","now","runNameFound","generation","invocation_params","tools","ls_model_name","model","ls_provider","provider","kwargs","openai_api_base","baseUrl","_popRunMetadata","endTime","run","console","warn","_getTraceId","String","_getParentRunId","_runId","actualParentRunId","_captureTraceOrSpan","eventName","latency","eventProperties","$ai_lib","$ai_lib_version","version","$ai_trace_id","$ai_input_state","$ai_latency","$ai_span_name","$ai_span_id","Object","assign","toString","capture","event","response","_captureGeneration","$ai_parent_id","$ai_provider","$ai_model","$ai_model_parameters","$ai_input","$ai_http_status","$ai_base_url","status","inputTokens","outputTokens","additionalTokenData","parseUsage","cacheReadInputTokens","reasoningTokens","completions","generations","lastGeneration","isChatGeneration","message","gen","_extractRawResponse","extra","log","arg","_convertLcToolCallsToOai","toolCalls","toolCall","function","arguments","JSON","stringify","text","trim","additional_kwargs","additionalKwargs","messageDict","messageType","getType","role","tool_calls","_parseUsageModel","usage","conversionList","parsedUsage","reduce","acc","modelKey","typeKey","finalCount","sum","tokenCount","prompt_tokens_details","cached_tokens","input_token_details","cache_read","cachedPromptTokens","completion_tokens_details","reasoning_tokens","output_token_details","reasoning","llmUsage","llmUsageKeys","llmOutput","find","k","genChunk","generationInfo","usage_metadata","messageChunk","responseMetadata","response_metadata","chunkUsage"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6]}